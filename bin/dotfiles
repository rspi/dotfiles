#!/bin/bash

function e_msg()      { echo -e "    $@";                  }
function e_success()  { echo -e " \033[0;32m✔\033[0m  $@"; }
function e_warning()  { echo -e " \033[1;33m⚠\033[0m  $@"; }
function e_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }
function e_backup()   { echo -e " \033[1;33m➜\033[0m  $@"; }
function e_link()     { echo -e " \033[0;32m➜\033[0m  $@"; }

# Symlink files and folders to $home
function home_folder_symlinks() {
  local base dest
  local count="$(ls ~/.dotfiles/link | wc -l)"

  if (( $count == 0 )); then return; fi

  for file in ~/.dotfiles/link/* ; do
    base="$(basename $file)"
    dest="$HOME/.$base"

    # Does file/folder already exist?
    if [[ -e "$dest" ]]; then

      # No need to back up if identical
      if diff -r $file $dest >/dev/null ; then
        continue
      fi

      e_backup "Backing up ~/.$base"
      [[ -e "$backup_dir" ]] || mkdir -p "$backup_dir"
      mv "$dest" "$backup_dir/$base"

    fi

    # Make the symlink
    e_link "Symlink to ~/.$base"
    ln -sf $file $dest
    
  done
}

# more special case symlinks
function other_symlinks() {
  file=~/.config/nvim/init.vim
  if ! [ -L $file ]; then
    mkdir -p ~/.config/nvim/
    ln -sf  ~/.dotfiles/config/nvim/init.vim $file
    e_link "Symlink to $file"
  fi

  file=~/.config/nvim/coc-settings.json
  if ! [ -L $file ]; then
    mkdir -p ~/.config/nvim/
    ln -sf  ~/.dotfiles/config/nvim/coc-settings.json $file
    e_link "Symlink to $file"
  fi

  file=~/.config/karabiner/karabiner.json
  if ! [ -L $file ]; then
    mkdir -p ~/.config/karabiner/
    ln -sf  ~/.dotfiles/config/karabiner.json $file
    e_link "Symlink to $file"
  fi
}

sudo -v

# Update existing sudo time stamp if set, otherwise do nothing.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# If backups are needed, this is where they'll go.
backup_dir="$HOME/.dotfiles/backups/$(date "+%Y_%m_%d-%H_%M_%S")/"

# OSX
if [[ "$OSTYPE" =~ ^darwin ]]; then

  # Ask about config options upfront
  read -p "Configure osx system settings? (y/n) " -n 1
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
      config_osx=1
  fi

  read -p "Install Homebrew stuff? (y/n) " -n 1
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
      config_homebrew=1
  fi

  read -p "Install & update Vim bundles? (y/n) " -n 1
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
      update_vimBundle=1
  fi

  # Install Homebrew
  if [[ ! "$(type -P brew)" ]]; then
    e_msg "Installing Homebrew.."
    true | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  if [[ ! "$(type -P brew)" ]]; then
    e_error "Homebrew should be installed. It's not. Aborting."
    exit 1
  fi

  # Update Homebrew
  brew update >/dev/null 2>/dev/null
  rq=$?
  if [ $? -ne 0 ]; then
    e_warning "There was a problem updating Homebrew."
  else
    e_success 'Homebrew up is to date'
  fi

  # Install Git
  if [[ ! "$(type -P git)" ]]; then
    e_msg 'Installing Git..'
    brew install git
  fi

  if [[ ! "$(type -P git)" ]]; then
    e_error "Git should be installed. It isn't. Aborting."
    exit 1
  fi

  git config --global core.excludesfile ~/.gitignore_global

  if [[ ! -d ~/.dotfiles ]]; then
    e_msg 'Download dotfiles repo'
    cd ~/.dotfiles
    git clone --recursive git://github.com/rspi/dotfiles.git ~/.dotfiles
  else
    e_msg 'Update dotfiles repo'
    cd ~/.dotfiles
    git pull
    git submodule update --init --recursive --quiet
  fi

  home_folder_symlinks
  other_symlinks

  if [[ "$update_vimBundle" ]]; then
    e_msg 'Install / Update vim bundles'
    vim +BundleInstall +BundleUpdate +qall
  fi
  if [[ "$config_homebrew" ]]; then
    e_msg 'Start homebrew installs'
    brew bundle --file=~/.dotfiles/config/Brewfile
  fi 
  if [[ "$config_osx" ]]; then
    e_msg 'Start osx system config'
    source ~/.dotfiles/config/osx
    e_msg 'Remeber to logout and in for osx changes to take effect!'
    open ~/.dotfiles/config/licorice.itermcolors
  fi


fi

e_success 'Complete!'
