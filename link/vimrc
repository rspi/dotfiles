" General {
set encoding=utf-8
set backspace=indent,eol,start
set nocompatible
set exrc
let mapleader = ','

set showcmd         " show current command input
set hidden          " does not force you to write or undo on :e
set autoread
set autowrite
set noswapfile
set nobackup
set nowritebackup
set history=200
set nrformats=      " use decimal notion rather then octal 07+01=08
set laststatus=0
set noruler
set complete=.,w,b

set number
set scrolloff=2
noremap j gj
noremap k gk
noremap <c-e> 2<c-e>
noremap <c-y> 2<c-y>
imap <C-C> <esc>
set mouse=nicr

set autoindent
set tabstop=2       " width of a tab char
set shiftwidth=2    " tunes amount of spaces
set softtabstop=2   " tunes amount of spaces for indentation (< >)
set expandtab       " spaces in place of tab chars
set nowrap
set linebreak

set gdefault        " set /g as default
set ignorecase
set smartcase
set incsearch
set hlsearch
nnoremap <silent><C-C> :noh<cr>

set foldmethod=marker
set foldlevel=100
set nofoldenable
set foldmarker={,}

nnoremap <silent><C-H> gT
nnoremap <silent><C-L> gt

syntax on
colorscheme licorice
set cursorline

" }
" Config {

" GUI Related.
if has("gui_running")
  set guioptions-=T " Disable toolbar
  set guioptions-=e " don't use gui tab apperance
  " set guioptions-=r " don't show scrollbars
  set guioptions-=l " don't show scrollbars
  set guioptions-=R " don't show scrollbars
  set guioptions-=L " don't show scrollbars
  set guicursor+=a:blinkon0 " disable blinking cursor
  map <2-LeftMouse> *
endif

" Windows stuff
if has("gui_win32")
  set guifont=Consolas:h9
  language messages en
endif

" Change cursor in insert mode for iterm
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Make star search lovely
" http://www.vim.org/scripts/script.php?script_id=4335
function! s:VStarsearch_searchCWord()
	let wordStr = expand("<cword>")
	if strlen(wordStr) == 0
		echohl ErrorMsg
		echo 'E348: No string under cursor'
		echohl NONE
		return
	endif
	if wordStr[0] =~ '\<'
		let @/ = '\<' . wordStr . '\>'
	else
		let @/ = wordStr
	endif
	let savedUnnamed = @"
	let savedS = @s
	normal! "syiw
	if wordStr != @s
		normal! w
	endif
	let @s = savedS
	let @" = savedUnnamed
endfunction
function! s:VStarsearch_searchVWord()
	let savedUnnamed = @"
	let savedS = @s
	normal! gv"sy
	let @/ = '\V' . substitute(escape(@s, '\'), '\n', '\\n', 'g')
	let @s = savedS
	let @" = savedUnnamed
endfunction
nnoremap <silent> * :call <SID>VStarsearch_searchCWord()<CR>:set hls<CR>
vnoremap <silent> * :<C-u>call <SID>VStarsearch_searchVWord()<CR>:set hls<CR>

" reload VIMRC
nnoremap <silent> <leader>rc :so $MYVIMRC<cr>:noh<cr>

" Spell-Menu dropdown
:nnoremap <leader>s a<C-X><C-S>

" quit :help with q
function! QuitWithQ()
  if &buftype == 'help' || &filetype == 'godoc'
    nnoremap <buffer> <silent> q :q<cr>
  endif
endfunction
autocmd FileType help exe QuitWithQ()
autocmd FileType godoc exe QuitWithQ()

" Auto reload vimrc on :write.
if has("autocmd")
  autocmd! bufwritepost vimrc source $MYVIMRC
endif

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ execute 'normal! g`"zvzz' |
    \ endif
augroup END

" close preview window for autocomplete
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" <C+S+X> to show element highlight group.
nmap <C-S-B> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Resize splits when the window is resized
au VimResized * :wincmd =

" command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
cnoremap WW w !sudo tee > /dev/null %

" Toggle between text/code mode.
let g:textModeEnabled = 0
function! TextModeToggle(lang)
  if g:textModeEnabled && a:lang == 'none'
    setlocal nospell
    setlocal nowrap
    let g:textModeEnabled = 0
  else
    if a:lang == 'sv'
      setlocal spelllang=sv
    else
      setlocal spelllang=en
    endif
    setlocal spell
    setlocal wrap
    let g:textModeEnabled = 1
  endif
endfunction
nnoremap <leader>t :call TextModeToggle("none")<cr>
nnoremap <leader>te :call TextModeToggle("en")<cr>
nnoremap <leader>ts :call TextModeToggle("sv")<cr>

autocmd BufNewFile,BufRead COMMIT_EDITMSG call TextModeToggle("en")

" }
" Plugins {
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'brooth/far.vim'
Bundle 'craigemery/vim-autotag'
Bundle 'jreybert/vimagit'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'pangloss/vim-javascript'
Bundle 'othree/html5.vim'
Bundle 'ekalinin/Dockerfile.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'vim-scripts/hexHighlight.vim'
Bundle 'slashmili/alchemist.vim'
let g:alchemist_tag_map = '<leader>d'
let g:alchemist#elixir_erlang_src = "/usr/local/share/src"
Bundle 'elixir-editors/vim-elixir'
Bundle 'mhinz/vim-mix-format'
let g:mix_format_on_save = 1
Bundle 'tmux-plugins/vim-tmux-focus-events'
let g:mix_format_silent_errors = 1
Bundle 'editorconfig/editorconfig-vim'

Bundle 'scrooloose/nerdtree'
nnoremap <leader>n :NERDTreeToggle<cr>
nnoremap <leader>m :NERDTreeFind<cr>
let g:NERDTreeWinSize=60
let NERDTreeQuitOnOpen=1
let NERDTreeMinimalUI=1

Bundle 'kien/ctrlp.vim'
let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|elm-stuff|vendor|build|_deps|node_modules$',
  \ 'file': '\v\.(exe|so|dll|a)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

Bundle 'neoclide/coc.nvim'
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)

Bundle 'scrooloose/syntastic'
let g:syntastic_enable_signs = 0
let g:syntastic_check_on_open = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = 'x'
let g:syntastic_warning_symbol = '!'
autocmd FileType javascript let b:syntastic_checkers = ['eslint']
let g:syntastic_go_checkers = ['']

Bundle 'ElmCast/elm-vim'
let g:elm_setup_keybindings = 0
let g:elm_detailed_complete = 1
let g:elm_format_autosave = 1
au FileType elm nmap <silent><buffer> K <Plug>(elm-show-docs)
au FileType elm nnoremap <silent> <Leader>gm /type alias Model<cr>:noh<esc>
au FileType elm nnoremap <silent> <Leader>gv /view :<cr>:noh<esc>
au FileType elm nnoremap <silent> <Leader>gu /update :<cr>:noh<esc>

Bundle 'fatih/vim-go'
let g:go_fmt_command = "gofmt"
au FileType go nmap <Leader>gi <Plug>(go-info)
au FileType go nmap <leader>gg <Plug>(go-run)
au FileType go nmap <Leader>gr <Plug>(go-rename)
au FileType go nmap <Leader>gd <Plug>(go-def-tab)
au FileType go nmap <leader>gb <Plug>(go-build)
au FileType go nmap <leader>gt <Plug>(go-test)
au FileType go nmap <leader>gl <Plug>(go-metalinter)
au FileType go nmap <Leader>gh <Plug>(go-doc-browser)

Bundle 'tpope/vim-commentary'
autocmd FileType apache setlocal commentstring=#%s
autocmd FileType elm setlocal commentstring=--%s

Bundle 'vimwiki/vimwiki'
let g:vimwiki_folding = 'expr'
nnoremap <leader>w/ :VimwikiSearch 
autocmd BufNewFile,BufRead *.wiki call TextModeToggle("en")

let g:vimwiki_list = [{
      \ 'path': $HOME.'/.vimwiki/wiki/',
      \ 'path_html': $HOME.'/.vimwiki/html/',
      \ 'template_path': $HOME.'/.vimwiki/html/assets/',
      \ 'template_default': 'default',
      \ 'template_ext': '.tpl',
      \ 'auto_export': 1
      \ }]


Bundle 'rspi/silver.vim'
let g:ag_command="ag --smart-case"

Bundle 'rspi/jira-ids.vim'
let g:jira_username='rasmuss'
let g:jira_projects=['xlbt']
let g:jira_statuses=["IN DEVELOPMENT", "IN REVIEW", "IN QA"]
let g:jira_url='https://lisa5.ludologic.com'

filetype plugin indent on
" }
