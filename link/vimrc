" General {
set encoding=utf-8
set backspace=indent,eol,start
set nocompatible
set exrc
let mapleader = ','

set showcmd         " show current command input
set hidden          " does not force you to write or undo on :e
set autoread
set autowrite
set noswapfile
set nobackup
set nowritebackup
set history=200
set nrformats=      " use decimal notion rather then octal 07+01=08
set laststatus=0
set noruler
set complete=.,w,b

set number
set scrolloff=2
noremap j gj
noremap k gk
noremap <c-e> 2<c-e>
noremap <c-y> 2<c-y>
imap <C-C> <esc>
set mouse=nicr

set autoindent
set tabstop=2       " width of a tab char
set shiftwidth=2    " tunes amount of spaces
set softtabstop=2   " tunes amount of spaces for indentation (< >)
set expandtab       " spaces in place of tab chars
set nowrap
set linebreak

set gdefault        " set /g as default
set ignorecase
set smartcase
set incsearch
set hlsearch
nnoremap <silent><C-C> :noh<cr>

" set foldmethod=marker
set foldmethod=manual
set foldlevel=100
set nofoldenable
set foldmarker={,}

nnoremap <silent><C-H> gT
nnoremap <silent><C-L> gt
nnoremap gT :-tabmove<cr>
nnoremap gt :+tabmove<cr>

syntax on
colorscheme licorice
set cursorline

" }
" Config {

" Change cursor in insert mode for iterm
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Make star search lovely
" http://www.vim.org/scripts/script.php?script_id=4335
function! s:VStarsearch_searchCWord()
	let wordStr = expand("<cword>")
	if strlen(wordStr) == 0
		echohl ErrorMsg
		echo 'E348: No string under cursor'
		echohl NONE
		return
	endif
	if wordStr[0] =~ '\<'
		let @/ = '\<' . wordStr . '\>'
	else
		let @/ = wordStr
	endif
	let savedUnnamed = @"
	let savedS = @s
	normal! "syiw
	if wordStr != @s
		normal! w
	endif
	let @s = savedS
	let @" = savedUnnamed
endfunction
function! s:VStarsearch_searchVWord()
	let savedUnnamed = @"
	let savedS = @s
	normal! gv"sy
	let @/ = '\V' . substitute(escape(@s, '\'), '\n', '\\n', 'g')
	let @s = savedS
	let @" = savedUnnamed
endfunction
nnoremap <silent> * :call <SID>VStarsearch_searchCWord()<cr>:set hls<cr>
vnoremap <silent> * :<C-u>call <SID>VStarsearch_searchVWord()<cr>:set hls<cr>

" reload VIMRC
nnoremap <silent> <leader>rc :so $MYVIMRC<cr>:noh<cr>

" Spell-Menu dropdown
:nnoremap <leader>s a<C-X><C-S>

" quit :help with q
function! QuitWithQ()
  if &buftype == 'help'
    nnoremap <buffer> <silent> q :q<cr>
    nnoremap <buffer> <silent><C-C> :q<cr>
  endif
endfunction
autocmd FileType help exe QuitWithQ()

" Auto reload vimrc on :write.
if has("autocmd")
  autocmd! bufwritepost vimrc source $MYVIMRC
endif

" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ execute 'normal! g`"zvzz' |
    \ endif
augroup END

" close preview window for autocomplete
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" <C+S+X> to show element highlight group.
nmap <C-S-B> :call <SID>SynStack()<cr>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Resize splits when the window is resized
au VimResized * :wincmd =

" command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
cnoremap WW w !sudo tee > /dev/null %

" Toggle between text/code mode.
let g:textModeEnabled = 0
function! TextModeToggle(lang)
  if g:textModeEnabled && a:lang == 'none'
    setlocal nospell
    setlocal nowrap
    let g:textModeEnabled = 0
  else
    if a:lang == 'sv'
      setlocal spelllang=sv
    else
      setlocal spelllang=en
    endif
    setlocal spell
    setlocal wrap
    let g:textModeEnabled = 1
  endif
endfunction
nnoremap <leader>t :call TextModeToggle("none")<cr>
nnoremap <leader>te :call TextModeToggle("en")<cr>
nnoremap <leader>ts :call TextModeToggle("sv")<cr>

autocmd BufNewFile,BufRead COMMIT_EDITMSG call TextModeToggle("en")

command! -range=% FormatJSON <line1>,<line2>!jq
command! -range=% FormatXML <line1>,<line2>!xmllint --format %
command! PyCharm :silent !charm --line <line1> %

" }
" Plugins {
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'brooth/far.vim'
Bundle 'craigemery/vim-autotag'
Bundle 'jreybert/vimagit'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'pangloss/vim-javascript'
Bundle 'mxw/vim-jsx'
Bundle 'othree/html5.vim'
Bundle 'ekalinin/Dockerfile.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'vim-scripts/hexHighlight.vim'
Bundle 'tmux-plugins/vim-tmux-focus-events'
Bundle 'editorconfig/editorconfig-vim'

Bundle 'scrooloose/nerdtree'
nnoremap <C-f><C-f> :NERDTreeToggle<cr>
nnoremap <C-f><C-r> :NERDTreeFind<cr>
let g:NERDTreeWinSize=60
let NERDTreeQuitOnOpen=1
let NERDTreeMinimalUI=1

Bundle 'junegunn/fzf'
Bundle 'junegunn/fzf.vim'
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!{.git,node_modules,vendor,build,webpack_bundles,elm-stuff}/*"' "
let g:fzf_preview_window = ''
nnoremap <C-f><C-p> :Files<cr>
nnoremap <C-f><C-g> :call fzf#run(fzf#wrap({'source': 'git diff --name-only $(git merge-base HEAD origin/prod)..', 'down': '40%'}))<cr>

Bundle 'neoclide/coc.nvim'
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f :CocCommand prettier.formatFile<cr>
nmap <c-_> :CocList outline<cr>
hi CocWarningSign  ctermfg=3
set shortmess+=c
set updatetime=300

nmap [g <Plug>(coc-git-prevchunk)
nmap ]g <Plug>(coc-git-nextchunk)
nmap gs <Plug>(coc-git-commit)

nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

Bundle 'ElmCast/elm-vim'
let g:elm_setup_keybindings = 0
let g:elm_detailed_complete = 1
let g:elm_format_autosave = 1
au FileType elm nnoremap <silent> <Leader>gm /type alias Model<cr>:noh<esc>
au FileType elm nnoremap <silent> <Leader>gv /view :<cr>:noh<esc>
au FileType elm nnoremap <silent> <Leader>gu /update :<cr>:noh<esc>

Bundle 'tpope/vim-commentary'
autocmd FileType apache setlocal commentstring=#%s
autocmd FileType elm setlocal commentstring=--%s

Bundle 'rspi/silver.vim'
let g:ag_command="ag --smart-case"

Bundle 'rspi/jira-ids.vim'
let g:jira_username='rasmuss'
let g:jira_projects=['RES']
let g:jira_statuses=["OPEN", "IN PROGRESS", "READY FOR TEST"]
let g:jira_url='jira.trioptima.net'

filetype plugin indent on
" }
