
###############################################################################
# PATH                                                                        #
###############################################################################

# remember that /etc/paths might override this.
push_path(){
  if ! echo $PATH | egrep -q "(^|:)$1($|:)" ; then
    if [ "$2" = "after" ] ; then
      PATH=$PATH:$1
    else
      PATH=$1:$PATH
    fi
  fi
}

# brew
if [[ $(arch) == 'arm64' ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
else
  push_path /usr/local/sbin
fi
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1

# bin
push_path ~/.dotfiles/bin

# local/bin
push_path /usr/local/bin


export PATH 


###############################################################################
# Alias and functions                                                         #
###############################################################################

alias vi="nvim"
alias vim="nvim"
alias wanip="dig +short myip.opendns.com @resolver1.opendns.com"
alias ip="ipconfig getifaddr en0"
alias ip1="ipconfig getifaddr en1"
alias week="date +%V"
alias cl="clear"
alias ..="cd .."
alias json='python -mjson.tool'
alias cd='cd -P'


# Start an HTTP server from a directory, optionally specifying the port
httpserver() {
 local port="${1:-8000}"
 sleep 1 && open "http://localhost:${port}/" &
 # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
 # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
 python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

encrypt() {
  gpg --output "$1.gpb" --symmetric --no-symkey-cache --cipher-algo AES256 $1
}

decrypt() {
  local filename=$(sed 's/.gpb//' <<< $1)
  gpg --output $filename --decrypt $1
}

# Search by name
search() {
  find . -iname "*$@*";
}

###############################################################################
# Command prompt stuff                                                        #
###############################################################################

# bash completion
if [ -f `brew --prefix`/etc/bash_completion ]; then
  . `brew --prefix`/etc/bash_completion
fi

function _git_prompt() {
local git_status="`git status -unormal 2>&1`"
if ! [[ "$git_status" =~ not\ a\ git\ repo ]]; then
  if [[ "$git_status" =~ nothing\ to\ commit ]]; then
    local ansi=32
  elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
    local ansi=33
  else
    local ansi=31
  fi
  if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
    branch=${BASH_REMATCH[1]}
    # test "$branch" != master || branch=' '
  else
    # Detached HEAD.  (branch=HEAD is a faster alternative.)
    branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
      echo HEAD`)"
  fi
  # echo -n '\[\e[0;37;'"$ansi"';1m\]'"$branch"'\[\e[0m\] '
  echo -n '\[\e[0;37;'"$ansi"';1m\]'"$branch"'\[\e[0m\] '
fi
}

function _prompt_command() {
  local GIT=`_git_prompt`
  if [[ -n "$IN_NIX_SHELL" ]]; then
      local NIX="\[\e[1;32m\]nix "
  fi
  local DIR="\[\e[1;34m\]\W\[\e[m\] "
  local ARROW="\[\e[0;37m\]❯ "
  PS1="$GIT$DIR$NIX$ARROW"
}

export MANPAGER='nvim +Man!'
export MANWIDTH=999

PROMPT_COMMAND=_prompt_command

export LC_ALL=en_US.UTF-8

export BASH_SILENCE_DEPRECATION_WARNING=1

# After each command, save and reload history
export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# append history entries..
shopt -s histappend

# Entries beginning with space aren't added into history, and duplicate
# entries will be erased (leaving the most recent entry).
export HISTCONTROL="ignorespace:erasedups"

# Give history timestamps.
export HISTTIMEFORMAT="[%F %T] "

export HISTSIZE=10000
export HISTFILESIZE=10000
export ERL_AFLAGS="-kernel shell_history enabled"
